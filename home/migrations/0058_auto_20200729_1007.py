# Generated by Django 3.0.5 on 2020-07-29 10:07

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import multiselectfield.db.fields


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailforms', '0004_add_verbose_name_plural'),
        ('wagtailcore', '0045_assign_unlock_grouppagepermission'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('wagtailredirects', '0006_redirect_increase_max_length'),
        ('home', '0057_merge_20200727_1756'),
    ]

    operations = [
        migrations.CreateModel(
            name='AllTutorsPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='TutorPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('course_subjects', multiselectfield.db.fields.MultiSelectField(choices=[('Computer Science', 'Computer Science'), ('Math', 'Math')], max_length=255, null=True)),
                ('is_accepting_students', models.BooleanField(blank=True, null=True)),
                ('hourly_rate', models.PositiveIntegerField(null=True)),
                ('timezone', models.CharField(choices=[('GMT', 'GMT Casablanca'), ('GMT', 'GMT Coordinated Universal Time'), ('GMT', 'GMT Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London'), ('GMT', 'GMT Monrovia, Reykjavik'), ('GMT+01:00', 'GMT+01:00 Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna'), ('GMT+01:00', 'GMT+01:00 Belgrade, Bratislava, Budapest, Ljubljana, Prague'), ('GMT+01:00', 'GMT+01:00 Brussels, Copenhagen, Madrid, Paris'), ('GMT+01:00', 'GMT+01:00 Sarajevo, Skopje, Warsaw, Zagreb'), ('GMT+01:00', 'GMT+01:00 West Central Africa'), ('GMT+02:00', 'GMT+02:00 Amman'), ('GMT+02:00', 'GMT+02:00 Athens, Bucharest, Istanbul'), ('GMT+02:00', 'GMT+02:00 Beirut'), ('GMT+02:00', 'GMT+02:00 Cairo'), ('GMT+02:00', 'GMT+02:00 Damascus'), ('GMT+02:00', 'GMT+02:00 Harare, Pretoria'), ('GMT+02:00', 'GMT+02:00 Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius'), ('GMT+02:00', 'GMT+02:00 Jerusalem'), ('GMT+02:00', 'GMT+02:00 Minsk'), ('GMT+02:00', 'GMT+02:00 Windhoek'), ('GMT+03:00', 'GMT+03:00 Baghdad'), ('GMT+03:00', 'GMT+03:00 Kuwait, Riyadh'), ('GMT+03:00', 'GMT+03:00 Moscow, St. Petersburg, Volgograd'), ('GMT+03:00', 'GMT+03:00 Nairobi'), ('GMT+03:30', 'GMT+03:00 Tehran'), ('GMT+04:00', 'GMT+04:00 Abu Dhabi, Muscat'), ('GMT+04:00', 'GMT+04:00 Baku'), ('GMT+04:00', 'GMT+04:00 Port Louis'), ('GMT+04:00', 'GMT+04:00 Tbilisi'), ('GMT+04:00', 'GMT+04:00 Yerevan'), ('GMT+04:30', 'GMT+04:30 Kabul'), ('GMT+05:00', 'GMT+05:00 Ekaterinburg'), ('GMT+05:00', 'GMT+05:00 Islamabad, Karachi'), ('GMT+05:00', 'GMT+05:00 Tashkent'), ('GMT+05:30', 'GMT+05:30 Chennai, Kolkata, Mumbai, New Delhi'), ('GMT+05:30', 'GMT+05:30 Sri Jayawardenepura'), ('GMT+05:45', 'GMT+05:45 Kathmandu'), ('GMT+06:00', 'GMT+06:00 Astana'), ('GMT+06:00', 'GMT+06:00 Dhaka'), ('GMT+06:00', 'GMT+06:00 Novosibirsk'), ('GMT+06:30', 'GMT+06:30 Yangon (Rangoon)'), ('GMT+07:00', 'GMT+07:00 Bangkok, Hanoi, Jakarta'), ('GMT+07:00', 'GMT+07:00 Krasnoyarsk'), ('GMT+08:00', 'GMT+08:00 Beijing, Chongqing, Hong Kong, Urumqi'), ('GMT+08:00', 'GMT+08:00 Irkutsk'), ('GMT+08:00', 'GMT+08:00 Kuala Lumpur, Singapore'), ('GMT+08:00', 'GMT+08:00 Perth'), ('GMT+08:00', 'GMT+08:00 Taipei'), ('GMT+08:00', 'GMT+08:00 Ulaanbaatar'), ('GMT+09:00', 'GMT+09:00 Osaka, Sapporo, Tokyo'), ('GMT+09:00', 'GMT+09:00 Seoul'), ('GMT+09:00', 'GMT+09:00 Yakutsk'), ('GMT+09:30', 'GMT+09:30 Adelaide'), ('GMT+09:30', 'GMT+09:30 Darwin'), ('GMT+10:00', 'GMT+10:00 Brisbane'), ('GMT+10:00', 'GMT+10:00 Canberra, Melbourne, Sydney'), ('GMT+10:00', 'GMT+10:00 Guam, Port Moresby'), ('GMT+10:00', 'GMT+10:00 Hobart'), ('GMT+10:00', 'GMT+10:00 Vladivostok'), ('GMT+11:00', 'GMT+11:00 Magadan, Solomon Is., New Caledonia'), ('GMT+12:00', 'GMT+12:00 Auckland, Wellington'), ('GMT+12:00', 'GMT+12:00 Coordinated Universal Time+12'), ('GMT+12:00', 'GMT+12:00 Fiji'), ('GMT+12:00', 'GMT+12:00 Petropavlovsk-Kamchatsky - Old'), ('GMT+13:00', 'GMT+13:00 Nuku alofa'), ('GMT-01:00', 'GMT-01:00 Azores'), ('GMT-01:00', 'GMT-01:00 Cape Verde Is.'), ('GMT-02:00', 'GMT-02:00 Coordinated Universal Time-02'), ('GMT-02:00', 'GMT-02:00 Mid-Atlantic'), ('GMT-03:00', 'GMT-03:00 Brasilia'), ('GMT-03:00', 'GMT-03:00 Buenos Aires'), ('GMT-03:00', 'GMT-03:00 Cayenne, Fortaleza'), ('GMT-03:00', 'GMT-03:00 Greenland'), ('GMT-03:00', 'GMT-03:00 Montevideo'), ('GMT-03:30', 'GMT-03:30 Newfoundland'), ('GMT-04:00', 'GMT-04:00 Asuncion'), ('GMT-04:00', 'GMT-04:00 Atlantic Time (Canada)'), ('GMT-04:00', 'GMT-04:00 Cuiaba'), ('GMT-04:00', 'GMT-04:00 Georgetown, La Paz, Manaus, San Juan'), ('GMT-04:00', 'GMT-04:00 Santiago'), ('GMT-04:30', 'GMT-04:30 Caracas'), ('GMT-05:00', 'GMT-05:00 Bogota, Lima, Quito'), ('GMT-05:00', 'GMT-05:00 Eastern Time (US & Canada)'), ('GMT-05:00', 'GMT-05:00 Indiana (East)'), ('GMT-06:00', 'GMT-06:00 Central America'), ('GMT-06:00', 'GMT-06:00 Central Time (US & Canada)'), ('GMT-06:00', 'GMT-06:00 Guadalajara, Mexico City, Monterrey'), ('GMT-06:00', 'GMT-06:00 Saskatchewan'), ('GMT-07:00', 'GMT-07:00 Arizona'), ('GMT-07:00', 'GMT-07:00 Chihuahua, La Paz, Mazatlan'), ('GMT-07:00', 'GMT-07:00 Mountain Time (US & Canada)'), ('GMT-08:00', 'GMT-08:00 Baja California'), ('GMT-08:00', 'GMT-08:00 Pacific Time (US & Canada)'), ('GMT-09:00', 'GMT-09:00 Alaska'), ('GMT-10:00', 'GMT-10:00 Hawaii'), ('GMT-11:00', 'GMT-11:00 Coordinated Universal Time-11'), ('GMT-11:00', 'GMT-11:00 Samoa'), ('GMT-12:00', 'GMT-12:00 International Date Line West')], max_length=255, null=True)),
                ('description', models.TextField(null=True)),
                ('avg_score', models.FloatField(blank=True, db_index=True, null=True)),
                ('review_count', models.IntegerField(default=0)),
                ('public', models.BooleanField(default=True, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='TutorReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveSmallIntegerField(db_index=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('publish_date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('subject', models.TextField(db_index=True)),
                ('description', models.TextField(db_index=True)),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True)),
                ('reviewer_type', models.CharField(choices=[('student', 'Student'), ('parent', 'Parent'), ('teacher', 'Teacher')], max_length=24)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, db_index=True, max_length=254, null=True)),
                ('is_anonymous', models.BooleanField()),
                ('tutor_page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tutor_reviews', to='home.TutorPage')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='coursereview',
            name='is_anonymous',
            field=models.BooleanField(default=False),
        ),
        migrations.DeleteModel(
            name='TutorsPage',
        ),
    ]
